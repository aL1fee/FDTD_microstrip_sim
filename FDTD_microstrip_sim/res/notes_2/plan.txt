Plan:

#build a coordinate system
#do a simple camera
#do ok frame timing
#do simple solidworks-like camera
#memory leaks
#start imgui for the first app GUI
#threading:
	1. Main thread: window creation, event processing, high-level application logic
	2. Rendering Thread: renders the scene using OpenGL
	3. Worker Threads: physics updates, math calculations, asset loading
#placing openGL context semi-correctly
#do correct window resizing
#do aspect ratio w/ correct drawing line (future ray casting) mouse pointing.
#do more basic vertex/vao data structures and improve line drawing algorithm
#ray casting at objects and cuboid collision detection
#do properties window w/ live changes
#address depth
#implement traces, housing
#make all objects generic and pointing to the same parent to get rid of vectors and arrays extra hardcodes
#POs should contain their own shaders as variables and run instructions as abstracted methods
#build cuboid carriers and substrates w/ properties
#ability to delete objects
#give control to PO parameters to GUI when building
#make a camera that rotates around a given object when you click on scrolling button
#added near/far plane settigns to the view
#ability to translate objects 
#ray casting at planes
#add vertical rotation at left shift + middle mouse
#cuboid scaling
#delete all lines option
#implement x-direction cylindrical power sources and detectors
#restructure tuning pads drawing: use instanced rendering or batching to lower vao# from 10000 to 2 (50x50 case)
#implement another method of not rebuilding the same object w/ transformations. use the model matrix
#tuning pads fix pad size rendering
#implement tuning pads (scaling issues, test edge cases)
#stop deleting mod vecs shader on update. handle its button presses efficiently
#implemented VAO and VBO deletion
#implement wires
#Wires RAM issues
#polish wires to a workable state; solve major issues. will need to redesign late
#implement ribbons using Gaussian curve equation






make another git branch

solve problems with transformation for center rotations

address intersectionDirection for modvectors

#debug crashes w/ access restriction

improve mod vec dynamic input mechanics. fix inf position bugs. fix y-coord orientation.

add MVP mat to modifying vectors; add rotations; fix issues
add MVP vertex handling in all objects (except for wires for now?). specify the rotation angle with respect to x.






polish ribbons
ribbons sometimes fly away on a startup. check and debug.
add triangular substrates & traces
add carrier with cut angles





*add string properties: name
*add bool properties: an option to turn on/off the edges
*add color properties
*add secondary lines to all objects
*test the program on another PC


*implement a hierarchy data structure to store elements & its properties of a scene
*hierarchy-level/many-object selection



11/11 - 11/21 **scene finish

	*fix property window bugs, add features and appearance. apply units

	*testingline and other curves rebuilding

	*do status window (latest messages appear at the top; time, scroll history features)

	*copying and pasting

	*undoing

	*saving & loading feature

	*address RAM in allobjects
	*esp RAM in lines and rays!

	*implement ecosorbs

	*implement T attenuators

	*create more systems

	




start with/ FDTD (11/18 at the latest!)
pay close attention to model matrix handling. consider Batch Processing, GPU Instancing










=====Major features TODO:
1. 2D top-view scene generation (another viewport)


======Bugs TODO:
1. translation changes direction in y at certain cam angles
2. stub array scaling after you modify parameters in the property window


======Memory leaks and performance TODO:
1. delete heap elements in object destructors that are children of physicalObject
2. Memory leaks from some objects
3. RAM issues from some objects

======Not a priority improvements TODO:
-1. GPU model matrix manipulation for CPU usage reduction
0. use glDrawElements to massively reduce vertex number
1. glfwpollevents doesn't run when resizing/dragging the window. As a result, key releases are not registered during resizing/dragging.
2. placing openGL context correctly
3. Worker Threads: physics updates, math calculations, asset loading
4. incorporate matrix stack calls when calculating model,view,proj matrices as specified in the book
5. do .frag and .vert shader files rather than .shader
6. make the scroll pointing to the mouse; not the front vector
7. improve point rotational camera
8. cuboid and other object rotation
9. issues w/ y translation
10. apply textures to carriers, substrates, traces
11. implement all directions cylindrical power sources and detectors
12. implement the model matrix for modyfing vectors 
13. undo
14. redo
16. build cut corner-shaped surfaces
17. implement custom polygons w/ properties
18. ?differentiate b/n noninteractable and nondeletable?
19. implement better wire system; add model matrix, scaling, rotation, translation
20. implement wires in all directions
21. make multi-level ribbons
22. decrease num of VAOs of mod vectors

------
future:
------
* implement elaborate solidworks camera
* use qt to create a comprehensive GUI (like FreeCAD, ParaView ones)
* memory leaks


ray casting for mouse object picking https://antongerdelan.net/opengl/raycasting.html#:~:text=It%20can%20be%20useful%20to%20click%20on%2C%20or,any%20objects.%20This%20is%20usually%20called%20ray%20casting.
address cpu usage & v-sync https://stackoverflow.com/questions/30381064/how-to-reduce-opengl-cpu-usage-and-or-how-to-use-opengl-properly
shaders: https://github.com/benburrill/picoputt/tree/main

GPU-accelerated simulations:
GPU-accelerated simulation refers to the use of Graphics Processing Units (GPUs) to speed up computational tasks involved in simulations. GPUs are highly efficient at handling parallel processing, which makes them ideal for tasks that require a lot of simultaneous calculations.

Here’s a breakdown of what this means:

Parallel Processing: GPUs can perform many calculations at the same time, unlike CPUs which are optimized for sequential processing. This parallelism is particularly useful for simulations that involve large datasets or complex mathematical computations.
Speed and Efficiency: By offloading compute-intensive parts of the simulation to the GPU, the overall simulation can run much faster. This is because GPUs have thousands of cores designed for handling multiple tasks simultaneously1.
Applications: GPU acceleration is used in various fields such as molecular dynamics, climate modeling, astrophysics, and more2. For example, in climate modeling, GPUs can process vast amounts of data to simulate weather patterns more quickly and accurately.
Integration with Software: Many simulation software packages, like MATLAB and Simulink, support GPU acceleration. They allow users to pass data to the GPU, perform computations, and then retrieve the results, minimizing the data transfer between the CPU and GPU3.






!
!
!!Insane cpu object generation/deletion. FIX

In most real-time graphics applications, the vertices for static objects are not regenerated every frame on the CPU. Instead, here's how the process generally works:

1. Static Geometry
For static objects (like buildings, terrain, etc.):

Vertices are pre-defined: The vertices of these objects are usually generated or loaded once at the beginning of the program (e.g., when loading models from files).
Stored in GPU Buffers: These vertices are then sent to the GPU and stored in vertex buffers. Once they are in the GPU memory, they can be rendered multiple times without needing to regenerate them.
Transformations: The model matrix (for transformations like translation, rotation, scaling) is computed on the CPU if the object moves or rotates. However, the vertex data remains unchanged unless the object itself is modified (e.g., a character animating or a terrain changing).
2. Dynamic Geometry
For dynamic objects (like characters or items that change every frame):

Vertex Data Update: In cases where vertices need to be updated every frame (like deformable models or particle systems), you may regenerate or modify vertex data on the CPU.
Buffer Updates: The updated vertex data can then be sent to the GPU each frame or every few frames. This can be done efficiently using methods like glBufferSubData or mapping the buffer for updates.
3. Procedural Generation
For procedurally generated content (like terrain or other structures generated at runtime):

On-the-Fly Generation: Vertices can be generated on the CPU each frame or as needed. This is common in games that create or modify environments dynamically.
Optimization Strategies: To maintain performance, such dynamic vertex generation is often combined with culling techniques and level of detail (LOD) management to limit the amount of geometry processed.
4. Instancing
For rendering many instances of the same object:

Single Vertex Data: Instead of generating vertices for each instance, you can store a single copy of the vertex data and use instancing techniques. The GPU handles drawing multiple instances with different transformations (model matrices) efficiently.
Summary
Static objects: Vertices are generated once, stored in GPU buffers, and reused.
Dynamic objects: Vertex data may need to be updated or regenerated on the CPU, but this is done selectively and efficiently.
Performance: The goal is to minimize unnecessary CPU work and optimize how data is passed to the GPU for rendering. In practice, the method used depends on the specific needs of the application, the nature of the objects being rendered, and performance considerations.